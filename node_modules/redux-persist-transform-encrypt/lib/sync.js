"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptTransform = void 0;
var Aes = __importStar(require("crypto-js/aes"));
var CryptoJsCore = __importStar(require("crypto-js/core"));
var json_stringify_safe_1 = __importDefault(require("json-stringify-safe"));
var redux_persist_1 = require("redux-persist");
var makeError = function (message) {
    return new Error("redux-persist-transform-encrypt: " + message);
};
exports.encryptTransform = function (config) {
    if (typeof config === 'undefined') {
        throw makeError('No configuration provided.');
    }
    var secretKey = config.secretKey;
    if (!secretKey) {
        throw makeError('No secret key provided.');
    }
    var onError = typeof config.onError === 'function' ? config.onError : console.warn;
    return redux_persist_1.createTransform(function (inboundState, _key) {
        return Aes.encrypt(json_stringify_safe_1.default(inboundState), secretKey).toString();
    }, function (outboundState, _key) {
        if (typeof outboundState !== 'string') {
            return onError(makeError('Expected outbound state to be a string.'));
        }
        try {
            var decryptedString = Aes.decrypt(outboundState, secretKey).toString(CryptoJsCore.enc.Utf8);
            if (!decryptedString) {
                throw new Error('Decrypted string is empty.');
            }
            try {
                return JSON.parse(decryptedString);
            }
            catch (_a) {
                return onError(makeError('Failed to parse state as JSON.'));
            }
        }
        catch (_b) {
            return onError(makeError('Could not decrypt state. Please verify that you are using the correct secret key.'));
        }
    });
};
